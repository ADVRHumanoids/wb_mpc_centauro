/******************************************************************************
Copyright (c) 2023, Ioannis Dadiotis <ioannis.dadiotis@iit.it>. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

 * Neither the name of the copyright holder nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
******************************************************************************/

#pragma once

#include <ros/node_handle.h>

#include <ocs2_centroidal_model/CentroidalModelInfo.h>
#include <ocs2_core/Types.h>
#include <ocs2_centauro/common/Types.h>
#include <gazebo_ocs2_ros_interfaces/mrt/DummyObserver.h>

#include <ocs2_centroidal_model/CentroidalModelRbdConversions.h>
#include <ocs2_msgs/joint_impedance_mapped_policy.h>

namespace ocs2 {
namespace legged_robot {

class JointImpedanceMappedPolicyPublisher : public DummyObserver {
 public:

  /**
   *
   * @param pinocchioInterface
   * @param centroidalModelInfo
   * @param maxUpdateFrequency : maximum publish frequency measured in MPC time.
   * @note This class implements a publisher of the mapped joint impedance policy. Based on the
   * current impedance control used state and input trajectories generated by the mpc along
   * the time horizon are mapped to joint impedance references (tff, qred, qdotref), this is what
   * we mean by impedance policy here. Data are published with a structure similar to the mpc policy.
   */
  JointImpedanceMappedPolicyPublisher(PinocchioInterface pinocchioInterface, CentroidalModelInfo centroidalModelInfo,
                        ros::NodeHandle& nodeHandle,
                        scalar_t maxUpdateFrequency = 100.0);
  ~JointImpedanceMappedPolicyPublisher() override = default;

  void update(const SystemObservation& observation, const PrimalSolution& primalSolution, const CommandData& command) override;
  void getParamsFromServer(ros::NodeHandle& nodeHandle);

 private:
  JointImpedanceMappedPolicyPublisher(const JointImpedanceMappedPolicyPublisher&) = delete;
  std::pair<vector_t, vector_t> getJointImpedanceGains(const std::pair<std::vector<float>, std::vector<float>>& lowerBodyJointImpedanceGains,
                                                       const std::pair<std::vector<float>, std::vector<float>>& upperBodyJointImpedanceGains) const;
  ocs2_msgs::joint_impedance_mapped_policy createJointImpedanceMappedPolicyMsg(const PrimalSolution& primalSolution);

  ros::NodeHandle nodeHandle_;
  std::string publishTopicName_ = "legged_robot/jointImpedanceMappedPolicy";
  ros::Publisher jointImpedanceMappedPolicyPublisher_;

  const CentroidalModelInfo centroidalModelInfo_;
  std::pair<vector_t, vector_t> orderedJointImpedanceGains_;
  std::vector<std::string> jointNames_;
  CentroidalModelRbdConversions centroidalModelRbdConversions_;
  std::vector<int> wheelIndices_;

  scalar_t lastTime_;
  scalar_t minPublishTimeDifference_;

};

}  // namespace legged_robot
}  // namespace ocs2
